# Enable tab completion
import rlcompleter
import pdb
pdb.Pdb.complete = rlcompleter.Completer(locals()).complete


# For ordinary Python objects, ppo will pretty-print members and their values.
alias po pp %1.__dict__

# ppio runs ppo over a sequence of objects
alias ppo pp [a.__dict__ for a in %1]

# Print a dictionary, sorted. %1 is the dict, %2 is the prefix for the names.
# alias p_ for k in sorted(%1.keys()): print("%s%-15s= %-80.80s" % ("%2", k, repr(%1[k])))
alias p_ for k in sorted(%1): print("%s = %-80.80s" % (k, repr(%1[k])))

# Print the member variables of a thing.
# alias pi p_ %1.__dict__ %1.
alias pi p_ %1.__dict__

# Print instance variables in self
alias ps pi self

# Print the locals.
alias pl p_ locals()

# Next and list, and step and list.
alias nl n;;l
alias sl s;;l

# 'inspect x' will print the source code for a method, class or function.
alias inspect import inspect; print(inspect.getsource(%1))

# 'help x' opens the man-style help viewer from the interpreter on an object
alias hh !print(help(%1))

del rlcompleter
